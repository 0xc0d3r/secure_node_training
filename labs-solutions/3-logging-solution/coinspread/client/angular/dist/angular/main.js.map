{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/activity/activity.component.css","webpack:///./src/app/activity/activity.component.html","webpack:///./src/app/activity/activity.component.ts","webpack:///./src/app/activity/activity.service.ts","webpack:///./src/app/add-friend/add-friend.component.css","webpack:///./src/app/add-friend/add-friend.component.html","webpack:///./src/app/add-friend/add-friend.component.ts","webpack:///./src/app/add-friend/add-friend.router.resolver.ts","webpack:///./src/app/add-wallet/add-wallet.component.css","webpack:///./src/app/add-wallet/add-wallet.component.html","webpack:///./src/app/add-wallet/add-wallet.component.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.constants.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/auth/auth.service.ts","webpack:///./src/app/auth/authguard.service.ts","webpack:///./src/app/auth/roleguard.service.ts","webpack:///./src/app/companion/companion.component.css","webpack:///./src/app/companion/companion.component.html","webpack:///./src/app/companion/companion.component.ts","webpack:///./src/app/companion/companion.service.ts","webpack:///./src/app/fees/fees.component.css","webpack:///./src/app/fees/fees.component.html","webpack:///./src/app/fees/fees.component.ts","webpack:///./src/app/fees/fees.router.resolver.ts","webpack:///./src/app/fees/fees.service.ts","webpack:///./src/app/friend/friend.component.css","webpack:///./src/app/friend/friend.component.html","webpack:///./src/app/friend/friend.component.ts","webpack:///./src/app/friend/friend.service.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/login/login.component.css","webpack:///./src/app/login/login.component.html","webpack:///./src/app/login/login.component.ts","webpack:///./src/app/payment/payment.component.css","webpack:///./src/app/payment/payment.component.html","webpack:///./src/app/payment/payment.component.ts","webpack:///./src/app/payment/payment.friend.resolver.ts","webpack:///./src/app/payment/payment.service.ts","webpack:///./src/app/payment/payment.wallets.resolver.ts","webpack:///./src/app/wallet/wallet.component.css","webpack:///./src/app/wallet/wallet.component.html","webpack:///./src/app/wallet/wallet.component.ts","webpack:///./src/app/wallet/wallet.service.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<h2>Activity Feed</h2>\\n\\n<alert [dismissible]=\\\"dismissible\\\" *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\">{{ errorMessage }}\\n</alert>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"activities?.length == 0\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      No records found.\\n    </div>\\n  </div>\\n</div>\\n\\n<ul class=\\\"list-group\\\">\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let activity of activities\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <h5>{{ activity.from }} </h5>\\n        <p> {{activity.createdAt | date}}</p>\\n        <p [innerHTML]=\\\"activity.trustedNote\\\"></p>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { ActivityService } from './activity.service';\nimport { Activity } from './activity';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-activity',\n  templateUrl: './activity.component.html',\n  styleUrls: ['./activity.component.css']\n})\nexport class ActivityComponent implements OnInit {\n\n  activities: Activity[];\n  errorMessage: string;\n\n  constructor(private activityService: ActivityService,\n    public auth: AuthService,\n    private sanitizer: DomSanitizer) {\n  }\n\n  ngOnInit() {\n    this.getActivitys();\n  }\n\n  private getActivitys() {\n    this.activityService.getActivitys()\n      .subscribe(data => {\n        this.activities = data.map(activity => {\n          activity.trustedNote = this.sanitizer.bypassSecurityTrustHtml(activity.note);\n          return activity;\n        });\n      }, errorResponse => {\n        const message = errorResponse.error.message ? errorResponse.error.message : errorResponse.message;\n        this.errorMessage = message;\n      });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API_URL } from '../app.constants';\nimport { Activity } from './activity';\n\n@Injectable()\nexport class ActivityService {\n\n  constructor(private http: HttpClient) { }\n\n  public getActivitys(): Observable<Activity[]> {\n    return this.http.get<Activity[]>(`${API_URL}/activity`);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>Add New Friend</h2>\\n<br>\\n<br>\\n<div *ngIf=\\\"errorMessage\\\">\\n  <alert dismissible=\\\"true\\\" type=\\\"danger\\\">{{ errorMessage }}</alert>\\n</div>\\n<div *ngIf=\\\"successMessage\\\">\\n  <alert dismissible=true *ngIf=\\\"successMessage\\\" type=\\\"success\\\">{{ successMessage }}</alert>\\n</div>\\n\\n<div class=\\\"col-sm-6 col-sm-offset-3\\\">\\n  <form #addFriendForm=\\\"ngForm\\\" (ngSubmit)=\\\"addFriend(addFriendForm.value)\\\">\\n    <div class=\\\"form-group\\\">\\n      <h4>{{ companion.firstname}} {{ companion.lastname}} - {{ companion.username}}</h4>\\n      <p> {{ companion.city}}, {{ companion.country}} </p>\\n      <input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"friendUserId\\\" [(ngModel)]=\\\"companion._id\\\">\\n\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Add</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-secondary ml-3\\\" (click)=\\\"goBack()\\\">Back</button>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { Companion } from '../companion/companion';\nimport { FriendService } from '../friend/friend.service';\n\n@Component({\n  selector: 'app-new-friend',\n  templateUrl: './add-friend.component.html',\n  styleUrls: ['./add-friend.component.css']\n})\nexport class AddFriendComponent implements OnInit {\n\n  companion: Companion;\n  errorMessage: any;\n  successMessage: any;\n\n  constructor(private route: ActivatedRoute, private router: Router, private location: Location, private friendService: FriendService) { }\n\n  ngOnInit() {\n    this.route.data\n      .subscribe((data: { companion: Companion }) => {\n        this.companion = data.companion;\n      });\n  }\n\n  addFriend(data) {\n    this.friendService.addToFriends(data)\n      .subscribe(\n        () => this.router.navigate(['companion']),\n        error => this.errorMessage = error.message\n      );\n  }\n\n  goBack() {\n    this.router.navigate(['companion']);\n  }\n\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {\n    Router, Resolve, RouterStateSnapshot,\n    ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { CompanionService } from '../companion/companion.service';\nimport { Companion } from '../companion/companion';\n\n@Injectable()\nexport class AddFriendRouterResolver implements Resolve<Companion> {\n    constructor(private companionService: CompanionService, private router: Router) { }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Companion> {\n        return this.companionService.getCompanion(route.params.id);\n    }\n}\n","module.exports = \"\"","module.exports = \"<h2>Add New Wallet</h2>\\n<br>\\n<div class=\\\"col-sm-6 col-sm-offset-3\\\">\\n  <form #addWalletForm=\\\"ngForm\\\" (ngSubmit)=\\\"addWallet(addWalletForm.value)\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"currency\\\" class=\\\"\\\">Currency</label>\\n      <select class=\\\"form-control\\\" name=\\\"currency\\\" ngModel required>\\n        <option *ngFor=\\\"let currency of currencies\\\" [value]=\\\"currency.code\\\">{{currency.name}} ({{currency.code}})\\n        </option>\\n      </select>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" class=\\\"\\\">Wallet Name</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Wallet Name\\\" name=\\\"name\\\" ngModel required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"balance\\\" class=\\\"\\\">Balance</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Balance\\\" name=\\\"balance\\\" ngModel required>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Add</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-secondary ml-3\\\" (click)=\\\"goBack()\\\">Back</button>\\n  </form>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router } from '@angular/router';\nimport { WalletService } from '../wallet/wallet.service';\nimport { Wallet } from '../wallet/wallet';\nimport { Location } from '@angular/common';\n\nexport interface Currency {\n  name: string;\n  code: string;\n}\n\n@Component({\n  selector: 'app-new-wallet',\n  templateUrl: './add-wallet.component.html',\n  styleUrls: ['./add-wallet.component.css']\n})\nexport class AddWalletComponent implements OnInit {\n\n  wallet: Wallet;\n  currencies: Currency[];\n\n  constructor(private router: Router, private location: Location, private walletService: WalletService) { }\n\n  ngOnInit() {\n    this.currencies = [\n      { code: 'BTC', name: 'Bitcoin' },\n      { code: 'BCH', name: 'Bitcoin Cash' },\n      { code: 'ETH', name: 'Euthereum' },\n      { code: 'LTC', name: 'LiteCoin' }\n    ];\n  }\n\n  addWallet(data) {\n    this.walletService.addWallet(data)\n      .subscribe(\n        () => this.router.navigate(['wallet']),\n        error => console.log(error)\n      );\n  }\n\n  goBack() {\n    this.location.back();\n  }\n\n}\n\n\n","module.exports = \"\"","module.exports = \"<nav class=\\\"navbar navbar-expand-lg navbar-dark bg-primary rounded\\\">\\n  <a class=\\\"navbar-brand\\\" routerLink=\\\"/home\\\">[...coin]</a>\\n  <div class=\\\"collapse navbar-collapse\\\">\\n    <ul class=\\\"navbar-nav mr-auto\\\">\\n      <ul *ngIf=\\\"auth.isAuthenticated() && !auth.isAdmin()\\\" class=\\\"nav navbar-nav\\\">\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/activity\\\">Activity</a></li>\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/wallet\\\">Wallets</a></li>\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/friend\\\">Friends</a></li>\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/companion\\\">Out there</a></li>\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/home\\\" (click)=\\\"auth.logout()\\\">Sign Out</a></li>\\n      </ul>\\n      <ul *ngIf=\\\"auth.isAuthenticated() && auth.isAdmin()\\\" class=\\\"nav navbar-nav\\\">\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/fees\\\">Manage Fees</a></li>\\n        <li class=\\\"nav-item\\\"><a class=\\\"nav-link\\\" routerLink=\\\"/home\\\" (click)=\\\"auth.logout()\\\">Sign Out\\n          </a></li>\\n      </ul>\\n\\n    </ul>\\n  </div>\\n</nav>\\n<br /><br />\\n<main class=\\\"container\\\">\\n  <router-outlet></router-outlet>\\n</main>\"","import { Component } from '@angular/core';\nimport { AuthService } from './auth/auth.service';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n\n  constructor(public auth: AuthService) { }\n}\n","export const API_DOMAIN = 'localhost:3000';\nexport const API_HOST = `http://${API_DOMAIN}`;\nexport const API_URL = `${API_HOST}/api/v1`;\n","import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { RouterModule, Router } from '@angular/router';\nimport { ROUTES } from './app.routes';\nimport { TabsModule, AlertModule } from 'ngx-bootstrap';\nimport { JwtModule } from '@auth0/angular-jwt';\n\n\nimport { API_DOMAIN } from './app.constants';\nimport { AppComponent } from './app.component';\n\nimport { LoginComponent } from './login/login.component';\nimport { HomeComponent } from './home/home.component';\nimport { WalletComponent } from './wallet/wallet.component';\nimport { ActivityComponent } from './activity/activity.component';\n\nimport { AddWalletComponent } from './add-wallet/add-wallet.component';\nimport { CompanionComponent } from './companion/companion.component';\nimport { FriendComponent } from './friend/friend.component';\nimport { FeesComponent } from './fees/fees.component';\n\nimport { AuthGuard } from './auth/authguard.service';\nimport { RoleGuard } from './auth/roleguard.service';\n\nimport { AuthService } from './auth/auth.service';\nimport { WalletService } from './wallet/wallet.service';\nimport { ActivityService } from './activity/activity.service';\n\nimport { CompanionService } from './companion/companion.service';\nimport { FriendService } from './friend/friend.service';\nimport { FeesService } from './fees/fees.service';\nimport { PaymentService } from './payment/payment.service';\nimport { FeesRouterResolver } from './fees/fees.router.resolver';\nimport { AddFriendComponent } from './add-friend/add-friend.component';\nimport { AddFriendRouterResolver } from './add-friend/add-friend.router.resolver';\nimport { PaymentComponent } from './payment/payment.component';\nimport { PaymentWalletsResolver } from './payment/payment.wallets.resolver';\nimport { PaymentFriendResolver } from './payment/payment.friend.resolver';\n\nexport function tokenGetter() {\n  return localStorage.getItem('token');\n}\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    LoginComponent,\n    HomeComponent,\n    WalletComponent,\n    ActivityComponent,\n    AddWalletComponent,\n    CompanionComponent,\n    FriendComponent,\n    FeesComponent,\n    AddFriendComponent,\n    PaymentComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    RouterModule.forRoot(ROUTES),\n    TabsModule.forRoot(),\n    AlertModule.forRoot(),\n    HttpClientModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: tokenGetter,\n        whitelistedDomains: [API_DOMAIN]\n      }\n    })\n  ],\n  providers: [\n    AuthService,\n    AuthGuard,\n    RoleGuard,\n    WalletService,\n    ActivityService,\n    CompanionService,\n    FriendService,\n    FeesService,\n    PaymentService,\n    FeesRouterResolver,\n    AddFriendRouterResolver,\n    PaymentWalletsResolver,\n    PaymentFriendResolver\n  ],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Routes } from '@angular/router';\nimport { HomeComponent } from './home/home.component';\nimport { LoginComponent } from './login/login.component';\nimport { WalletComponent } from './wallet/wallet.component';\nimport { ActivityComponent } from './activity/activity.component';\n\nimport { CompanionComponent } from './companion/companion.component';\nimport { FriendComponent } from './friend/friend.component';\n\nimport { AddWalletComponent } from './add-wallet/add-wallet.component';\nimport { AuthGuard } from './auth/authguard.service';\nimport { RoleGuard } from './auth/roleguard.service';\nimport { FeesComponent } from './fees/fees.component';\nimport { FeesRouterResolver } from './fees/fees.router.resolver';\nimport { AddFriendComponent } from './add-friend/add-friend.component';\nimport { AddFriendRouterResolver } from './add-friend/add-friend.router.resolver';\nimport { PaymentComponent } from './payment/payment.component';\nimport { PaymentWalletsResolver } from './payment/payment.wallets.resolver';\nimport { PaymentFriendResolver } from './payment/payment.friend.resolver';\n\nexport const ROUTES: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'home', component: HomeComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'wallet/new', component: AddWalletComponent, canActivate: [AuthGuard] },\n  { path: 'wallet', component: WalletComponent, canActivate: [AuthGuard] },\n  { path: 'activity', component: ActivityComponent, canActivate: [AuthGuard] },\n\n  { path: 'companion', component: CompanionComponent, canActivate: [AuthGuard] },\n  { path: 'friend', component: FriendComponent, canActivate: [AuthGuard] },\n  {\n    path: 'friend/add/:id', component: AddFriendComponent, canActivate: [AuthGuard],\n    resolve: { companion: AddFriendRouterResolver }\n  },\n  {\n    path: 'pay/:id', component: PaymentComponent, canActivate: [AuthGuard],\n    resolve: { wallets: PaymentWalletsResolver, friend: PaymentFriendResolver }\n  },\n  {\n    path: 'fees',\n    component: FeesComponent,\n    canActivate: [AuthGuard],\n    resolve: { fees: FeesRouterResolver }\n  }\n\n];\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { JwtHelperService } from '@auth0/angular-jwt';\nimport { Observable } from 'rxjs';\nimport { API_HOST } from './../app.constants';\n\n@Injectable()\nexport class AuthService {\n\n  constructor(private http: HttpClient, private router: Router, private jwtHelper: JwtHelperService) { }\n\n  login(credentials): Observable<any> {\n    return this.http.post(`${API_HOST}/access/signin`, credentials);\n  }\n\n  signup(credentials): Observable<any> {\n    return this.http.post<any>(`${API_HOST}/access/signup`, credentials);\n  }\n\n  finishAuthentication(token): void {\n    localStorage.setItem('token', token);\n    if (this.isAdmin()) {\n      this.router.navigate(['fees']);\n    } else {\n      this.router.navigate(['companion']);\n    }\n  }\n\n  logout(): void {\n    localStorage.removeItem('token');\n  }\n\n  isAuthenticated(): boolean {\n    // return !this.jwtHelper.isTokenExpired();\n    return localStorage.getItem('token') != null;\n  }\n\n  isAdmin(): boolean {\n    // return this.jwtHelper.decodeToken(this.getToken()).scope === 'admin';\n    return false;\n  }\n\n  getToken(): string {\n    return localStorage.getItem('token');\n  }\n\n  getUseRole(): string {\n    return this.jwtHelper.decodeToken(this.getToken()).scope;\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthGuard implements CanActivate {\n\n  constructor(private auth: AuthService, private router: Router) { }\n\n  canActivate() {\n    if (this.auth.isAuthenticated()) {\n      return true;\n    } else {\n      this.router.navigate(['login']);\n    }\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Router, CanActivate } from '@angular/router';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class RoleGuard implements CanActivate {\n\n  constructor(private auth: AuthService, private router: Router) {}\n\n  canActivate() {\n    if (this.auth.isAuthenticated() && this.auth.isAdmin()) {\n      return true;\n    } else {\n      this.router.navigate(['login']);\n    }\n  }\n}\n","module.exports = \"\"","module.exports = \"<h2>You May Know</h2>\\n\\n<alert [dismissible]=\\\"dismissible\\\" *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\">{{ errorMessage }}\\n</alert>\\n<div class=\\\"row\\\" *ngIf=\\\"companions?.length == 0\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        No records found.\\n      </div>\\n    </div>\\n  </div>\\n\\n<ul class=\\\"list-group\\\">\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let companion of companions\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <h4>{{ companion.firstname}} {{ companion.lastname}} - {{ companion.username}}</h4>\\n        <p> {{ companion.city}}, {{ companion.country}} </p>\\n      </div>\\n    </div>\\n\\n    <button class=\\\"btn btn-primary\\\" *ngIf=\\\"auth.isAuthenticated()\\\" routerLink=\\\"/friend/add/{{companion.id}}\\\">\\n      <i class=\\\"glyphicon glyphicon-plus\\\"></i> Add to Friends\\n    </button>\\n\\n  </li>\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './../auth/auth.service';\nimport { CompanionService } from './companion.service';\nimport { Companion } from './companion';\n\n@Component({\n  selector: 'app-companion',\n  templateUrl: './companion.component.html',\n  styleUrls: ['./companion.component.css']\n})\nexport class CompanionComponent implements OnInit {\n\n  companions: Companion[];\n  errorMessage: string;\n\n  constructor(private companionService: CompanionService, public auth: AuthService) { }\n\n  ngOnInit() {\n    this.getCompanions();\n  }\n\n  private getCompanions() {\n    this.companionService.getCompanions()\n      .subscribe(\n        data => this.companions = data,\n        errResponse => this.errorMessage = errResponse.error.message || errResponse.message\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API_URL } from '../app.constants';\nimport { Companion } from './companion';\n\n\n@Injectable()\nexport class CompanionService {\n\n\n  constructor(private http: HttpClient) { }\n\n  public getCompanions(): Observable<Companion[]> {\n    return this.http.get<Companion[]>(`${API_URL}/companion`);\n  }\n  public getCompanion(id): Observable<Companion> {\n    return this.http.get<Companion>(`${API_URL}/companion/${id}`);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>Set Transaction Fees (in %)</h2>\\n<br>\\n<div *ngIf=\\\"errorMessage\\\">\\n  <alert dismissible=\\\"true\\\" type=\\\"danger\\\">{{ errorMessage }}</alert>\\n</div>\\n<div *ngIf=\\\"successMessage\\\">\\n  <alert dismissible=true *ngIf=\\\"successMessage\\\" type=\\\"success\\\">{{ successMessage }}</alert>\\n</div>\\n<div class=\\\"col-sm-6 col-sm-offset-3\\\">\\n  <form #manageFeesForm=\\\"ngForm\\\" (ngSubmit)=\\\"saveFees(manageFeesForm.value)\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" class=\\\"\\\">BitCoin Transaction</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"%\\\" name=\\\"btc_fees\\\" [(ngModel)]=\\\"fees.btc_fees\\\">\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" class=\\\"\\\">BitCash Transaction</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"%\\\" name=\\\"bch_fees\\\" [(ngModel)]=\\\"fees.bch_fees\\\" required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" class=\\\"\\\">Euthereum Transaction</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"%\\\" name=\\\"eth_fees\\\" [(ngModel)]=\\\"fees.eth_fees\\\" required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"name\\\" class=\\\"\\\">Litecoin Transaction</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"%\\\" name=\\\"ltc_fees\\\" [(ngModel)]=\\\"fees.ltc_fees\\\" required>\\n    </div>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Save</button>\\n  </form>\\n</div>\"","import { Component, OnInit, Input } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { FeesService } from './fees.service';\nimport { Fees } from './fees';\nimport { Location } from '@angular/common';\n\n@Component({\n  selector: 'app-fees',\n  templateUrl: './fees.component.html',\n  styleUrls: ['./fees.component.css']\n})\n\n\nexport class FeesComponent implements OnInit {\n  fees: Fees;\n  errorMessage: string;\n  successMessage: string;\n\n  constructor(\n    private route: ActivatedRoute, private router: Router, private location: Location, private feesService: FeesService) {\n  }\n\n  ngOnInit() {\n    this.route.data\n      .subscribe((data: { fees: Fees }) => {\n        this.fees = data.fees;\n      });\n  }\n\n  private getFees() {\n    this.feesService.getFees()\n      .subscribe(\n        data => this.fees = data[0],\n        error => {\n          this.errorMessage = error.message;\n        }\n      );\n  }\n\n  saveFees(data) {\n    this.feesService.saveFees(data)\n      .subscribe(\n        () => this.successMessage = 'Changes saved successfuly!',\n        response => {\n          this.errorMessage = response.error.message;\n        }\n      );\n  }\n\n  goBack() {\n    this.location.back();\n  }\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {\n    Router, Resolve, RouterStateSnapshot,\n    ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { FeesService } from './fees.service';\nimport { Fees } from './fees';\n\n@Injectable()\nexport class FeesRouterResolver implements Resolve<Fees> {\n    constructor(private feesService: FeesService, private router: Router) { }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Fees> {\n        return this.feesService.getFees();\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API_URL } from '../app.constants';\nimport { Fees } from './fees';\n\n@Injectable()\nexport class FeesService {\n\n  constructor(private http: HttpClient) { }\n\n  public getFees(): Observable<Fees> {\n    return this.http.get<Fees>(`${API_URL}/fees`);\n  }\n\n  public saveFees(data): Observable<Fees> {\n    return this.http.put<Fees>(`${API_URL}/fees`, data);\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>Friends</h2>\\n\\n<alert [dismissible]=\\\"dismissible\\\" *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\">{{ errorMessage }}\\n</alert>\\n\\n<div class=\\\"row\\\" *ngIf=\\\"friends?.length == 0\\\">\\n  <div class=\\\"container\\\">\\n    <div class=\\\"col-sm-12\\\">\\n      No records found.\\n    </div>\\n  </div>\\n</div>\\n\\n<ul class=\\\"list-group\\\">\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let friend of friends\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <h4>{{ friend.firstname}} {{ friend.lastname}} - {{ friend.username}}</h4>\\n        <p> {{ friend.city}}, {{ friend.country}} </p>\\n      </div>\\n    </div>\\n    <button class=\\\"btn btn-primary\\\" *ngIf=\\\"auth.isAuthenticated()\\\" routerLink=\\\"/pay/{{ friend.id }}\\\">\\n      <i class=\\\"glyphicon glyphicon-plus\\\"></i> Pay\\n    </button>\\n  </li>\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './../auth/auth.service';\nimport { FriendService } from './friend.service';\nimport { Friend } from './friend';\n\n@Component({\n  selector: 'app-friend',\n  templateUrl: './friend.component.html',\n  styleUrls: ['./friend.component.css']\n})\nexport class FriendComponent implements OnInit {\n\n  friends: Friend[];\n  errorMessage: string;\n\n  constructor(private friendService: FriendService, public auth: AuthService) { }\n\n  ngOnInit() {\n    this.getFriends();\n  }\n\n  private getFriends() {\n    this.friendService.getFriends()\n      .subscribe(\n        data => this.friends = data,\n        error => {\n          this.errorMessage = error.message;\n        }\n      );\n  }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable, BehaviorSubject } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API_URL } from '../app.constants';\nimport { Friend } from './friend';\nimport { Companion } from '../companion/companion';\nimport { map } from 'rxjs/operators';\n\n@Injectable()\nexport class FriendService {\n  private friends$: Observable<Friend[]> = new BehaviorSubject<Friend[]>([]);\n\n  getFriendById(id: string) {\n    return this.friends$.pipe(\n      map(friends => friends.find(friend => friend.id === id))\n    );\n  }\n\n  constructor(private http: HttpClient) { }\n  public getFriends(): Observable<Friend[]> {\n    this.friends$ = this.http.get<Friend[]>(`${API_URL}/friend`);\n    return this.friends$;\n  }\n\n  public addToFriends(data): Observable<Companion> {\n    return this.http.post<Companion>(`${API_URL}/friend/${data.friendUserId}`, data);\n  }\n}\n","module.exports = \"\"","module.exports = \"<div class=\\\"card shadow zindex-100\\\">\\n  <div class=\\\"card-body px-md-5 py-5\\\">\\n\\n    <h1>Welcome to Coin Spread!</h1>\\n    <p><a class=\\\"btn btn-primary btn-lg\\\" routerLink=\\\"/login\\\" *ngIf=\\\"!auth.isAuthenticated()\\\" role=\\\"button\\\">Log In</a></p>\\n    <p><a class=\\\"btn btn-primary btn-lg\\\" (click)=\\\"logout()\\\" *ngIf=\\\"auth.isAuthenticated()\\\" role=\\\"button\\\">Log Out</a></p>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './../auth/auth.service';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.css']\n})\nexport class HomeComponent implements OnInit {\n\n  constructor(public auth: AuthService) { }\n\n  ngOnInit() { }\n\n  logout() {\n    this.auth.logout();\n  }\n}\n","module.exports = \"form {\\n  margin-top: 15px;\\n}\"","module.exports = \"<div class=\\\"row justify-content-center\\\">\\n  <div class=\\\"col-md-8 col-lg-6\\\">\\n\\n    <div class=\\\"card shadow zindex-100\\\">\\n      <div class=\\\"card-body px-md-5 py-5\\\">\\n        <alert *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\">{{ errorMessage }}\\n        </alert>\\n\\n        <tabset>\\n          <tab heading='Sign In'>\\n            <div class=\\\"text-center mb-5\\\">\\n              <br>\\n              <h6 class=\\\"h3\\\">Welcome back</h6>\\n              <p class=\\\"text-muted mb-0\\\">Sign in to your account to continue</p>\\n            </div>\\n            <span class=\\\"clearfix\\\"></span>\\n\\n            <form #loginForm=\\\"ngForm\\\" (ngSubmit)=\\\"onLoginSubmit(loginForm.value)\\\">\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"user\\\">Username/Email</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your username or email\\\" name=\\\"username\\\"\\n                  ngModel required>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"username\\\" class=\\\"\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your password\\\" name=\\\"password\\\" ngModel\\n                  required>\\n              </div>\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Sign In</button>\\n            </form>\\n          </tab>\\n          <tab heading=\\\"Sign Up\\\">\\n            <div class=\\\"text-center mb-5\\\">\\n              <br>\\n              <h6 class=\\\"h3\\\">Create your free account</h6>\\n              <p class=\\\"text-muted mb-0\\\">Experience a new way to share payments</p>\\n            </div>\\n            <span class=\\\"clearfix\\\"></span>\\n            <form #signupForm=\\\"ngForm\\\" (ngSubmit)=\\\"onSignupSubmit(signupForm.value)\\\">\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"username\\\">Username</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your username\\\" name=\\\"username\\\" ngModel\\n                  required>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"password\\\" class=\\\"\\\">Password</label>\\n                <input type=\\\"password\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your password\\\" name=\\\"password\\\" ngModel\\n                  required>\\n              </div>\\n\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"username\\\">First Name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your First Name\\\" name=\\\"firstname\\\" ngModel\\n                  required>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"lastname\\\">Last Name</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your Last Name\\\" name=\\\"lastname\\\" ngModel\\n                  required>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"taxid\\\">Tax ID</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your Tax ID / SSN\\\" name=\\\"tax_id\\\" ngModel>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"address\\\">Address</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your address\\\" name=\\\"address_line1\\\" ngModel>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"city\\\">City</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your city\\\" name=\\\"city\\\" ngModel required>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"state\\\">State</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your state\\\" name=\\\"state\\\" ngModel required>\\n              </div>\\n              <div class=\\\"form-group\\\">\\n                <label for=\\\"country\\\">Country</label>\\n                <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter your country\\\" name=\\\"country\\\" ngModel\\n                  required>\\n              </div>\\n              <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Create Account</button>\\n            </form>\\n          </tab>\\n        </tabset>\\n\\n      </div>\\n    </div>\\n\\n\\n\\n  </div>\"","import { Component } from '@angular/core';\nimport { AuthService } from '../auth/auth.service';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.css']\n})\nexport class LoginComponent {\n\n  errorMessage: string;\n\n  constructor(private auth: AuthService) { }\n\n  onLoginSubmit(credentials) {\n    this.auth.login(credentials)\n      .subscribe(\n        response => this.auth.finishAuthentication(response.token),\n        errorResponse => this.errorMessage = errorResponse.error.message || errorResponse.message\n      );\n  }\n\n  onSignupSubmit(credentials) {\n    // credentials.admin = true;\n    this.auth.signup(credentials)\n      .subscribe(\n        response => this.auth.finishAuthentication(response.token),\n        response => this.errorMessage = response.error.message\n      );\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2>Pay to {{friend.firstname}} {{friend.lastname}} ({{ friend.username}})</h2>\\n<br>\\n<div *ngIf=\\\"errorMessage\\\">\\n  <alert type=\\\"danger\\\">{{ errorMessage }}</alert>\\n</div>\\n<div *ngIf=\\\"successMessage\\\">\\n  <alert *ngIf=\\\"successMessage\\\" type=\\\"success\\\">{{ successMessage }}</alert>\\n</div>\\n<div class=\\\"col-sm-6 col-sm-offset-3\\\">\\n\\n  <form #payFriendForm=\\\"ngForm\\\" (ngSubmit)=\\\"payFriend(payFriendForm.value)\\\">\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"balance\\\">Wallet</label>\\n      <select class=\\\"form-control\\\" name=\\\"wallet\\\" ngModel required>\\n        <option *ngFor=\\\"let wallet of wallets\\\" [value]=\\\"wallet._id\\\">{{wallet.name}} - Available Balance:\\n          {{wallet.balance}}\\n          {{wallet.currency}}\\n        </option>\\n      </select>\\n    </div>\\n\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"username\\\">Amount</label>\\n      <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Enter amount to pay\\\" name=\\\"amount\\\" ngModel required>\\n    </div>\\n    <div class=\\\"form-group\\\">\\n      <label for=\\\"username\\\">Note</label>\\n      <textarea class=\\\"form-control\\\" placeholder=\\\"Payment for...\\\" name=\\\"note\\\" ngModel required></textarea>\\n    </div>\\n    <input type=\\\"hidden\\\" class=\\\"form-control\\\" name=\\\"friendUserId\\\" [(ngModel)]=\\\"friend.id\\\" required>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Pay</button>\\n    <button type=\\\"submit\\\" class=\\\"btn btn-secondary ml-3\\\" (click)=\\\"goBack()\\\">Back</button>\\n\\n  </form>\\n\\n\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Router, ActivatedRoute } from '@angular/router';\nimport { Location } from '@angular/common';\nimport { PaymentService } from './payment.service';\nimport { FriendService } from '../friend/friend.service';\nimport { Wallet } from '../wallet/wallet';\nimport { Friend } from '../friend/friend';\n\n@Component({\n  selector: 'app-payment',\n  templateUrl: './payment.component.html',\n  styleUrls: ['./payment.component.css']\n})\nexport class PaymentComponent implements OnInit {\n\n  wallets: Wallet[];\n  friend: Friend;\n  errorMessage: any;\n  successMessage: any;\n\n  constructor(private route: ActivatedRoute,\n    private router: Router,\n    private location: Location,\n    private payFriendService: PaymentService,\n    private friendService: FriendService) {\n  }\n\n  ngOnInit() {\n    this.route.data\n      .subscribe((data: { wallets: Wallet[], friend: Friend }) => {\n        this.wallets = data.wallets;\n        this.friend = data.friend;\n      });\n  }\n\n  payFriend(data) {\n    this.payFriendService.pay(data)\n      .subscribe(\n        () => this.successMessage = 'Payment on its way!',\n        error => this.errorMessage = error.message\n      );\n  }\n\n  goBack() {\n    this.router.navigate(['friend']);\n  }\n\n}\n\n\n","import { Injectable } from '@angular/core';\nimport {\n    Router, Resolve, RouterStateSnapshot,\n    ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { FriendService } from '../friend/friend.service';\nimport { Friend } from '../friend/friend';\n\n@Injectable()\nexport class PaymentFriendResolver implements Resolve<any> {\n    constructor(\n        private friendService: FriendService,\n        private router: Router) { }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Friend> {\n        return this.friendService.getFriendById(route.params.id);\n    }\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API_URL } from '../app.constants';\nimport { Payment } from './payment';\n\n@Injectable()\nexport class PaymentService {\n\n  constructor(private http: HttpClient) { }\n\n  public pay(data): Observable<Payment> {\n    return this.http.post<Payment>(`${API_URL}/payment`, data);\n  }\n}\n","import { Injectable } from '@angular/core';\nimport {\n    Router, Resolve, RouterStateSnapshot,\n    ActivatedRouteSnapshot\n} from '@angular/router';\nimport { Observable } from 'rxjs';\n\nimport { WalletService } from '../wallet/wallet.service';\nimport { Wallet } from '../wallet/wallet';\n\n@Injectable()\nexport class PaymentWalletsResolver implements Resolve<any> {\n    constructor(\n        private walletService: WalletService,\n        private router: Router) { }\n\n    resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot): Observable<Wallet[]> {\n        return this.walletService.getWallets();\n    }\n}\n","module.exports = \"\"","module.exports = \"<alert [dismissible]=\\\"dismissible\\\" *ngIf=\\\"errorMessage\\\" type=\\\"danger\\\">{{ errorMessage }}\\n</alert>\\n\\n<h2>My Wallets</h2>\\n\\n<button class=\\\"btn btn-primary\\\" *ngIf=\\\"auth.isAuthenticated()\\\" routerLink=\\\"/wallet/new\\\">\\n  <i class=\\\"glyphicon glyphicon-plus\\\"></i> Add Wallet\\n</button>\\n\\n<ul class=\\\"list-group mt-3\\\">\\n  <li class=\\\"list-group-item\\\" *ngFor=\\\"let wallet of wallets\\\">\\n    <div class=\\\"container\\\">\\n      <div class=\\\"col-sm-12\\\">\\n        <h3 [innerHTML]=\\\"wallet.trustedName\\\"></h3>\\n        <p> Currency: {{ wallet.currency }}</p>\\n        <p> Balance: {{ wallet.balance }}</p>\\n        <p> Address: {{ wallet.address }}</p>\\n      </div>\\n    </div>\\n  </li>\\n</ul>\"","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from './../auth/auth.service';\nimport { WalletService } from './wallet.service';\nimport { Wallet } from './wallet';\nimport { DomSanitizer } from '@angular/platform-browser';\n\n@Component({\n  selector: 'app-wallet',\n  templateUrl: './wallet.component.html',\n  styleUrls: ['./wallet.component.css']\n})\nexport class WalletComponent implements OnInit {\n\n  wallets: Wallet[];\n  errorMessage: string;\n\n  constructor(private walletService: WalletService,\n    public auth: AuthService,\n    private sanitizer: DomSanitizer) {\n  }\n\n  ngOnInit() {\n    this.getWallets();\n  }\n\n  private getWallets() {\n    this.walletService.getWallets()\n      .subscribe(data => {\n        this.wallets = data.map(wallet => {\n          wallet.trustedName = this.sanitizer.bypassSecurityTrustHtml(wallet.name);\n          return wallet;\n        });\n      }, error => {\n        this.errorMessage = error.message;\n      });\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs';\nimport { HttpClient } from '@angular/common/http';\nimport { API_URL } from '../app.constants';\nimport { Wallet } from './wallet';\n\n@Injectable()\nexport class WalletService {\n\n  constructor(private http: HttpClient) { }\n\n  public getWallets(): Observable<Wallet[]> {\n    return this.http.get<Wallet[]>(`${API_URL}/wallet`);\n  }\n\n  public addWallet(data): Observable<Wallet> {\n    return this.http.post<Wallet>(`${API_URL}/wallet`, data);\n  }\n\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n\n"],"sourceRoot":""}